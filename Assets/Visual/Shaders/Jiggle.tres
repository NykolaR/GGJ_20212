[gd_resource type="VisualShader" load_steps=23 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorOp" id=2]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=3]
default_input_values = [ 0, Vector3( 1, 1, 1 ), 1, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "time_scale"

[sub_resource type="VisualShaderNodeScalarOp" id=5]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=6]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.1, 0.1, 0.1 ) ]
operator = 2

[sub_resource type="VisualShaderNodeScalarConstant" id=7]
constant = 0.5

[sub_resource type="VisualShaderNodeTextureUniform" id=8]
uniform_name = "noise"

[sub_resource type="VisualShaderNodeScalarUniform" id=9]
uniform_name = "intensity"

[sub_resource type="VisualShaderNodeVectorOp" id=10]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=11]

[sub_resource type="VisualShaderNodeVec3Uniform" id=12]
uniform_name = "PosessPosition"

[sub_resource type="VisualShaderNodeScalarUniform" id=13]
uniform_name = "max_distance"

[sub_resource type="VisualShaderNodeTextureUniform" id=14]
uniform_name = "distance_curve"

[sub_resource type="VisualShaderNodeScalarClamp" id=15]

[sub_resource type="VisualShaderNodeScalarOp" id=16]
operator = 3

[sub_resource type="VisualShaderNodeVectorCompose" id=17]

[sub_resource type="VisualShaderNodeVectorDecompose" id=18]

[sub_resource type="VisualShaderNodeVectorOp" id=19]
operator = 2

[sub_resource type="VisualShaderNodeVectorDistance" id=20]

[sub_resource type="VisualShaderNodeInput" id=21]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=22]
input_name = "time"

[resource]
code = "shader_type spatial;
render_mode specular_schlick_ggx, world_vertex_coords;

uniform vec3 PosessPosition;
uniform float max_distance;
uniform sampler2D distance_curve;
uniform float intensity;
uniform float time_scale;
uniform sampler2D noise;



void vertex() {
// Input:4
	vec3 n_out4p0 = VERTEX;

// VectorUniform:2
	vec3 n_out2p0 = PosessPosition;

// Distance:3
	float n_out3p0 = distance(n_out2p0, n_out4p0);

// ScalarUniform:20
	float n_out20p0 = max_distance;

// ScalarClamp:22
	float n_in22p1 = 0.00000;
	float n_out22p0 = clamp(n_out3p0, n_in22p1, n_out20p0);

// ScalarOp:23
	float n_out23p0 = n_out22p0 / n_out20p0;

// VectorCompose:24
	float n_in24p1 = 0.00000;
	float n_in24p2 = 0.00000;
	vec3 n_out24p0 = vec3(n_out23p0, n_in24p1, n_in24p2);

// TextureUniform:21
	vec3 n_out21p0;
	float n_out21p1;
	{
		vec4 n_tex_read = texture(distance_curve, n_out24p0.xy);
		n_out21p0 = n_tex_read.rgb;
		n_out21p1 = n_tex_read.a;
	}

// VectorDecompose:25
	float n_out25p0 = n_out21p0.x;
	float n_out25p1 = n_out21p0.y;
	float n_out25p2 = n_out21p0.z;

// ScalarUniform:17
	float n_out17p0 = intensity;

// Input:6
	float n_out6p0 = TIME;

// ScalarUniform:12
	float n_out12p0 = time_scale;

// ScalarOp:13
	float n_out13p0 = n_out6p0 * n_out12p0;

// VectorOp:19
	vec3 n_out19p0 = n_out4p0 + vec3(n_out13p0);

// TextureUniform:16
	vec3 n_out16p0;
	float n_out16p1;
	{
		vec4 n_tex_read = texture(noise, n_out19p0.xy);
		n_out16p0 = n_tex_read.rgb;
		n_out16p1 = n_tex_read.a;
	}

// Scalar:15
	float n_out15p0 = 0.500000;

// VectorOp:10
	vec3 n_out10p0 = n_out16p0 - vec3(n_out15p0);

// VectorOp:14
	vec3 n_in14p1 = vec3(0.10000, 0.10000, 0.10000);
	vec3 n_out14p0 = n_out10p0 * n_in14p1;

// VectorOp:18
	vec3 n_out18p0 = vec3(n_out17p0) * n_out14p0;

// VectorOp:27
	vec3 n_out27p0 = vec3(n_out25p0) * n_out18p0;

// VectorOp:11
	vec3 n_out11p0 = n_out4p0 + n_out27p0;

// Output:0
	VERTEX = n_out11p0;

}

void fragment() {
// Input:2
	vec3 n_out2p0 = COLOR.rgb;

// Output:0
	ALBEDO = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 686, -148 )
flags/world_vertex_coords = true
nodes/vertex/0/position = Vector2( 1760, 60 )
nodes/vertex/2/node = SubResource( 12 )
nodes/vertex/2/position = Vector2( -400, -20 )
nodes/vertex/3/node = SubResource( 20 )
nodes/vertex/3/position = Vector2( -100, 40 )
nodes/vertex/4/node = SubResource( 21 )
nodes/vertex/4/position = Vector2( -400, 60 )
nodes/vertex/6/node = SubResource( 22 )
nodes/vertex/6/position = Vector2( -620, 180 )
nodes/vertex/10/node = SubResource( 2 )
nodes/vertex/10/position = Vector2( 140, 280 )
nodes/vertex/11/node = SubResource( 3 )
nodes/vertex/11/position = Vector2( 1460, 160 )
nodes/vertex/12/node = SubResource( 4 )
nodes/vertex/12/position = Vector2( -620, 400 )
nodes/vertex/13/node = SubResource( 5 )
nodes/vertex/13/position = Vector2( -520, 280 )
nodes/vertex/14/node = SubResource( 6 )
nodes/vertex/14/position = Vector2( 340, 260 )
nodes/vertex/15/node = SubResource( 7 )
nodes/vertex/15/position = Vector2( 80, 480 )
nodes/vertex/16/node = SubResource( 8 )
nodes/vertex/16/position = Vector2( -120, 260 )
nodes/vertex/17/node = SubResource( 9 )
nodes/vertex/17/position = Vector2( 280, 120 )
nodes/vertex/18/node = SubResource( 10 )
nodes/vertex/18/position = Vector2( 860, 280 )
nodes/vertex/19/node = SubResource( 11 )
nodes/vertex/19/position = Vector2( -320, 300 )
nodes/vertex/20/node = SubResource( 13 )
nodes/vertex/20/position = Vector2( -120, 140 )
nodes/vertex/21/node = SubResource( 14 )
nodes/vertex/21/position = Vector2( 620, -160 )
nodes/vertex/22/node = SubResource( 15 )
nodes/vertex/22/position = Vector2( 120, 0 )
nodes/vertex/23/node = SubResource( 16 )
nodes/vertex/23/position = Vector2( 320, -20 )
nodes/vertex/24/node = SubResource( 17 )
nodes/vertex/24/position = Vector2( 400, -140 )
nodes/vertex/25/node = SubResource( 18 )
nodes/vertex/25/position = Vector2( 900, 80 )
nodes/vertex/27/node = SubResource( 19 )
nodes/vertex/27/position = Vector2( 1220, 280 )
nodes/vertex/connections = PoolIntArray( 4, 0, 3, 1, 2, 0, 3, 0, 6, 0, 13, 0, 12, 0, 13, 1, 10, 0, 14, 0, 4, 0, 11, 0, 15, 0, 10, 1, 16, 0, 10, 0, 17, 0, 18, 0, 14, 0, 18, 1, 13, 0, 19, 1, 4, 0, 19, 0, 19, 0, 16, 0, 3, 0, 22, 0, 20, 0, 22, 2, 22, 0, 23, 0, 20, 0, 23, 1, 23, 0, 24, 0, 24, 0, 21, 0, 21, 0, 25, 0, 11, 0, 0, 0, 25, 0, 27, 0, 18, 0, 27, 1, 27, 0, 11, 1 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -160, 160 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0 )
